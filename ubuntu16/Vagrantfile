# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/ubuntu-16.04"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  config.vm.network "forwarded_port", guest: 3000, host: 3000

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 3000, host: 3000, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", type: "dhcp"
  config.vm.network "private_network", ip: "192.168.33.12"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    apt-get update -qq
    apt-get install -y autoconf bison build-essential libssl-dev libyaml-dev libpq-dev libxml2-dev libxslt1-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm3 libgdbm-dev
    apt-get install -y gcc g++ make jq unzip xvfb qt5-default libqt5webkit5-dev gstreamer1.0-plugins-base gstreamer1.0-tools gstreamer1.0-x
    apt-get install -y imagemagick libmagickcore-dev libmagickwand-dev
    apt-get install -y postgresql postgresql-contrib libpq-dev
  SHELL

  # install docker
  config.vm.provision "docker" do |d|
    # load install containers...
    d.pull_images "alpine:latest"
    d.pull_images "redis:4-alpine"
    d.pull_images "postgres:9-alpine"
    d.pull_images "ruby:2.2.10-slim"
  end

  config.vm.provision "file", source:"install-scripts/bash_aliases", destination: ".bash_aliases"
  config.vm.provision "file", source:"install-scripts/vimrc", destination: ".vimrc"
  config.vm.provision "shell", path: "install-scripts/install-node.sh"
  config.vm.provision "shell", path: "install-scripts/install-ruby.sh"
  config.vm.provision "shell", path: "install-scripts/install-rails.sh"
  config.vm.provision "shell", path: "install-scripts/install-user.sh"
  # config.vm.provision "shell", path: "install-scripts/install-app.sh"
  config.vm.provision "shell", path: "install-scripts/post-install.sh"

end
